@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": false,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 0,
    "showDetailedClassStructure": true
  },
  "rootClass": "kw.org.lab2.Input"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
ElementFaktury1179842735[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ElementFaktury</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cena: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ilosc: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nazwa: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ total(): double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Faktura1179842735[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Faktura</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   klient: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   list: List&lt;ElementFaktury&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nazwa: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ add(produkt: String, ilosc: int, cena: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ print()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Input1179842735[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Input</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   faktura: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   klient: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   map: Map&lt;String, Klient&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- fDodaj(args: String[])</TD></TR>
<TR><TD ALIGN="LEFT" >- fLista()</TD></TR>
<TR><TD ALIGN="LEFT" >- fNowa(nazwa: String)</TD></TR>
<TR><TD ALIGN="LEFT" >- fWybierz(nazwa: String)</TD></TR>
<TR><TD ALIGN="LEFT" >- fWyswietl()</TD></TR>
<TR><TD ALIGN="LEFT" >- help()</TD></TR>
<TR><TD ALIGN="LEFT" >- kLista()</TD></TR>
<TR><TD ALIGN="LEFT" >- kNowy(nazwa: String)</TD></TR>
<TR><TD ALIGN="LEFT" >- kWybierz(nazwa: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ start()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Klient1179842735[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Klient</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   map: Map&lt;String, Faktura&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nazwa: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ add(faktura: String, produkt: String, ilosc: String, cena: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ create(faktura: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ find(faktura: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ list()</TD></TR>
<TR><TD ALIGN="LEFT" >+ show(faktura: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

'edges    
Faktura1179842735 -> ElementFaktury1179842735[label="list
[0..*]"];
Input1179842735 -> Klient1179842735[label="map
[0..*]"];
Klient1179842735 -> Faktura1179842735[label="map
[0..*]"];
    
}
@enduml